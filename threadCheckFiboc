using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Concurrent;
using System.Text.RegularExpressions;

namespace testWaitHandle
{
    class Program
    {
        static Thread t = new Thread(th);
        static AutoResetEvent e = new AutoResetEvent(false);
        static List<int> numbers = new List<int>();

        //private static bool check;

        static void Main(string[] args)
        {

            t.Start();
            Console.ReadKey();
            int fibo;
            //check for the numbers
            foreach (int num in numbers)
            {
                fibo = checkFibo(num);

            }
            do
            {

                e.WaitOne();
                int cnt;
                cnt = numbers.Count;
                for (int j = 0; j < cnt; j++)
                {

                    Console.WriteLine("Dequeue : {0}", a);
                }
                if (numbers.Contains(fibo))
                {
                    numbers.Add(num);
                    //print values

                }



            } while ();
            );

        }
        private static void th()
        {
            int num = 6;
            
            for (int j = 0; j < num; j++)
            {

                Console.Write("element - {0} : ", j);
                numbers.Add(item);
                a[j] = Convert.ToInt32(Console.ReadLine());


            }

        }

        private int checkFibo(int n)
        {
            int number = n - 1;
            int[] Fib = new int[number + 1];

            Fib[0] = 0;
            Fib[1] = 1;

            for (int i = 2; i <= 6; i++)

            {

                Fib[i] = Fib[i - 2] + Fib[i - 1];

            }

            return Fib[number];

        }
    }
}




/*   Console.ReadLine()
   //wait for the signal that comes from thread
   int a = 0;
   do
   {
       e.WaitOne();
       int cnt;
       cnt = q.Count;
       for (int j = 0; j < cnt; j++)
       {
           q.TryDequeue(out a);
           Console.WriteLine("Dequeue : {0}", a);
       }

       printValues(q);


   } while (a != -1);

}

public static int GetNthFibonacci_Ite(int n)

{

   int number = n - 1; //Need to decrement by 1 since we are starting from 0

   int[] Fib = new int[number + 1];

   Fib[0]= 0;

   Fib[1]= 1;



   for (int i = 2; i <= number;i++)

   {

      Fib[i] = Fib[i - 2] + Fib[i - 1];

   }

   return Fib[number];

}


private static void th()
{
   int num;
   String name = Thread.CurrentThread.Name;
   Console.WriteLine("waiting on AutoResetEvent :", name);
   Console.WriteLine("Insert numbers:");

   // Console.ReadLine();

   /* num = int.Parse(Console.ReadLine());
    if (num > 0)
    {
        q.Enqueue(num);
        Console.WriteLine("Enqueue : {0}", num);
        e.Set();
    }
    else
    {
        Console.Write("DONE");

    }
        */
//Console.ReadKey();
/*
do
{

    String str = Console.ReadLine();
    num = 0;
    try
    {
        num = Convert.ToInt32(str);
        q.Enqueue(num);
        Console.WriteLine("Enqueue : {0}", num);
        e.Set();
    }
    catch (Exception e)
    {
        Console.WriteLine("Exception: " + e.Message);
    }

} while (num != -1);

Console.WriteLine("Exiting..");

/*  do
  {
    i++;
  num = Console.Read();
  Console.WriteLine(" Enqueue : ", num);
      e.Set();

  } while (num != -1);

  e.Set();
  */

/*
    private static void printValues(ConcurrentQueue<int> q)
    {
        foreach (Object obj in q)
        {
            Console.WriteLine("{0}", obj);
        }
    }

*/
